#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json
import sqlite3
import sys
import zipfile
from datetime import datetime
from pathlib import Path

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ term_bank_*.json.
# 10000 ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π Yomitan.
CHUNK_SIZE = 10000

# –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite.
# –ò–∑–º–µ–Ω–∏—Ç–µ –∏—Ö, –µ—Å–ª–∏ –≤–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.
DB_TABLE_NAME = "translations"
DB_COLUMNS = ["word", "reading", "kind", "english", "priority"]


def create_index_json(title: str, description: str, author: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–∞–π–ª–∞ index.json."""
    revision = f"db_export_{datetime.now().strftime('%Y.%m.%d_%H%M%S')}"
    return {
        "title": title,
        "format": 3,
        "revision": revision,
        "sequenced": True,
        "description": description,
        "author": author,
    }


def export_to_yomitan_zip(db_path: Path, zip_path: Path, title: str):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –≤ ZIP-–∞—Ä—Ö–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∞ Yomitan.
    """
    if not db_path.is_file():
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}", file=sys.stderr)
        sys.exit(1)

    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    try:
        con = sqlite3.connect(f"file:{db_path}?mode=ro", uri=True)
        cur = con.cursor()
        sql_query = f"SELECT {', '.join(DB_COLUMNS)} FROM {DB_TABLE_NAME}"
        cur.execute(sql_query)
    except sqlite3.OperationalError as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ '{DB_TABLE_NAME}' –∏ –∫–æ–ª–æ–Ω–∫–∏ {DB_COLUMNS} —Å—É—â–µ—Å—Ç–≤—É—é—Ç.",
            file=sys.stderr
        )
        sys.exit(1)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", file=sys.stderr)
        sys.exit(1)

    print(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç –≤ –∞—Ä—Ö–∏–≤: {zip_path}...")
    try:
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_f:
            # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º index.json
            index_content = create_index_json(
                title=title,
                description=f"–°–ª–æ–≤–∞—Ä—å '{title}', —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.",
                author="DB to Yomitan Exporter"
            )
            # ensure_ascii=False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –∫–∞–Ω—ã
            zip_f.writestr(
                "index.json",
                json.dumps(index_content, ensure_ascii=False, indent=2)
            )

            # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π tag_bank_1.json (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
            zip_f.writestr("tag_bank_1.json", "[]")

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (term banks)
            bank_num = 1
            entries_in_current_bank = []
            total_entries_exported = 0

            for row in cur:
                word, reading, kind, english_str, priority = row

                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã "; "
                translations = english_str.split('; ')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Yomitan:
                # [—Ç–µ—Ä–º–∏–Ω, —á—Ç–µ–Ω–∏–µ, —Ç–µ–≥–∏, –ø—Ä–∞–≤–∏–ª–∞, —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è]
                yomitan_entry = [word, reading, kind, "", int(priority), translations]
                entries_in_current_bank.append(yomitan_entry)
                total_entries_exported += 1

                if len(entries_in_current_bank) >= CHUNK_SIZE:
                    filename = f"term_bank_{bank_num}.json"
                    print(f"  -> –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ {filename} ({len(entries_in_current_bank)} –∑–∞–ø–∏—Å–µ–π)...")
                    zip_f.writestr(
                        filename,
                        json.dumps(entries_in_current_bank, ensure_ascii=False, separators=(',', ':'))
                    )
                    bank_num += 1
                    entries_in_current_bank = []

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–Ω–µ–ø–æ–ª–Ω—ã–π) –±–∞–Ω–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if entries_in_current_bank:
                filename = f"term_bank_{bank_num}.json"
                print(f"  -> –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ {filename} ({len(entries_in_current_bank)} –∑–∞–ø–∏—Å–µ–π)...")
                zip_f.writestr(
                    filename,
                    json.dumps(entries_in_current_bank, ensure_ascii=False, separators=(',', ':'))
                )

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_entries_exported} –∑–∞–ø–∏—Å–µ–π.")

    except (IOError, zipfile.BadZipFile) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ ZIP-–∞—Ä—Ö–∏–≤: {e}", file=sys.stderr)
        sys.exit(1)
    finally:
        con.close()


def main():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –≤ —Å–ª–æ–≤–∞—Ä—å —Ñ–æ—Ä–º–∞—Ç–∞ Yomitan (zip).",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "database_file",
        metavar="DB_FILE",
        type=Path,
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, dict.db)."
    )
    parser.add_argument(
        "-o", "--output",
        type=Path,
        required=True,
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å–ª–æ–≤–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, my_dictionary.zip)."
    )
    parser.add_argument(
        "-t", "--title",
        type=str,
        default="Exported Dictionary",
        help="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Yomitan."
    )
    parser.add_argument(
        "-f", "--force",
        action="store_true",
        help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ZIP-–∞—Ä—Ö–∏–≤ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    args = parser.parse_args()
    db_path = args.database_file
    zip_path = args.output

    if zip_path.exists() and not args.force:
        print(
            f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{zip_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ -f –∏–ª–∏ --force, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ.",
            file=sys.stderr
        )
        sys.exit(1)

    export_to_yomitan_zip(db_path, zip_path, args.title)

    print("\nüéâ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è: {zip_path.resolve()}")


if __name__ == "__main__":
    main()
